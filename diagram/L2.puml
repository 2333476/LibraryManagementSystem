@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()
AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

SHOW_PERSON_OUTLINE()

title Container Diagram for Loan Management System

Person(customer, "Customer", "A registered library member who borrows books")
Person(employee, "Employee", "Library staff member who manages inventory and loans")

System_Boundary(c1, "Loan Management System") {
    Container(web_app, "Web Application", "Java, Spring MVC", "Delivers the static content and frontend UI for the system")
    Container(spa, "Single-Page App", "JavaScript, React", "Provides all functionality via browser")
    Container(api_gateway, "API-Gateway", "Java, Spring Boot", "Routes requests to all microservices", $tags = "microService")

    Container(loan_service, "loan-service", "Java, Spring Boot", "Aggregator microservice for handling book loans", $tags = "microService")
    Container(catalog_service, "book-service", "Java, Spring Boot", "Book catalog management microservice", $tags = "microService")
    Container(customer_service, "customer-service", "Java, Spring Boot", "Customer profile management microservice", $tags = "microService")
    Container(employee_service, "employee-service", "Java, Spring Boot", "Employee/staff management microservice", $tags = "microService")

    ContainerDb(loan_db, "loan-db", "MongoDB", "Stores loan aggregate data", $tags = "storage")
    ContainerDb(catalog_db, "book-db", "PostgreSQL", "Stores book info and availability", $tags = "storage")
    ContainerDb(customer_db, "customer-db", "MySQL", "Stores customer/member information", $tags = "storage")
    ContainerDb(employee_db, "employee-db", "MySQL", "Stores employee details", $tags = "storage")
}

' UI relationships
Rel_Neighbor(web_app, spa, "Delivers")
Rel(customer, web_app, "Uses", "HTTPS")
Rel(employee, web_app, "Uses", "HTTPS")
Rel(spa, api_gateway, "Uses", "async, JSON/HTTPS")

' Gateway routes to services
Rel(api_gateway, loan_service, "Routes loan-related requests", "HTTPS")
Rel(api_gateway, catalog_service, "Routes book-related requests", "HTTPS")
Rel(api_gateway, customer_service, "Routes customer-related requests", "HTTPS")
Rel(api_gateway, employee_service, "Routes employee-related requests", "HTTPS")

' Aggregator dependencies
Rel(loan_service, catalog_service, "Fetches book data from", "HTTPS")
Rel(loan_service, customer_service, "Fetches customer data from", "HTTPS")

' DB connections
Rel_D(loan_service, loan_db, "reads/writes", "Spring Data MongoDB")
Rel_D(catalog_service, catalog_db, "reads/writes", "JDBC/Postgres")
Rel_D(customer_service, customer_db, "reads/writes", "JDBC/MySQL")
Rel_D(employee_service, employee_db, "reads/writes", "JDBC/MySQL")

@enduml
